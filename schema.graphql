enum BridgeType {
  XDAI
  AMB
}

type Transfer {
  id: ID! # messageId
  transactionHash: Bytes # Tx hash where the bridge operation started (it will be set/undefined depending on the bridge side)
  timestamp: BigInt # timestamp when the bridge operation started (it will be set/undefined depending on the bridge side)
  bridgeName: String # Bridge Name (xDai, OmniBridge, AMB)
  sender: Bytes
  amount: BigInt
  token: Bytes
}

type Transaction {
  id: ID! # messageId
  messageId: Bytes # AMB id
  transactionHash: Bytes # Tx hash where the bridge operation started (it will be set/undefined depending on the bridge side)
  timestamp: BigInt # timestamp when the bridge operation started (it will be set/undefined depending on the bridge side)
  bridgeName: String # Bridge Name (xDai, OmniBridge, AMB)
  transactionStatus: TransactionStatus
  # initiator info
  initiator: Bytes # Sender Address
  initiatorNetwork: String # Origin Network Name (mainnet, xdai, chiado, goerli)
  initiatorAmount: BigInt # Amount sent
  initiatorToken: Bytes # ERC20 token address
  # receiver info
  receiver: Bytes # Receiver Address
  receiverNetwork: String # Dest Network Name (mainnet, xdai, chiado, goerli)
  receiverAmount: BigInt # Amount sent
  receiverToken: Bytes # ERC20 token address
  # validations & execution
  # validations: [TransactionValidation!] @derivedFrom(field: "transaction")
  execution: TransactionExecution # This is the "end" of the bridge operation. It can be seen as the "claim". In Home is executed by the validator when the threshold is reached. In Foreign is executed by the user manually.
}

type Validator @entity(immutable: false) {
  id: ID! # Validator Address
  name: String # See Config folder
  bridgeType: BridgeType # xDai, AMB, Omnibridge
  address: Bytes!
  lastActivity: BigInt # Last time Validator Signed|Executed a Tx
  # signed: [TransactionValidation!]! @derivedFrom(field: "validator") # tx signed (24hs)
  # executed: [TransactionExecution!]! @derivedFrom(field: "executor") # tx executed (24hs)
  hashAdded: String!
  hashRemoved: String
  removed: Boolean
}

enum TransactionStatus {
  INITIATED
  COLLECTING
  UNCLAIMED
  COMPLETED
  ERROR
}

type TransactionValidation @entity(immutable: false) {
  id: ID! # tx.id + '-' + validator.id
  transaction: Transaction!
  transactionHash: Bytes
  validator: Validator!
  validatorAddr: Bytes # helper to allow filtering by validator address TODO: make this required
  timestamp: BigInt!
}

type TransactionExecution @entity(immutable: false) {
  id: ID! # tx.id + '-' + validator.id
  transaction: Transaction! # Tx hash where the bridge operation ended
  transactionHash: Bytes!
  timestamp: BigInt! # timestamp when the bridge operation ended
  # if Foreign > Home set validator (The last signer). if Home > Foreign set Null.
  # todo: rename to validator.
  executor: Validator
  validatorAddr: Bytes # helper to allow filtering by validator address
}

type XDAITransaction @entity(immutable: false) {
  id: ID! # Transaction Hash
  transactionHash: Bytes
  bridgeName: String
  initiator: Bytes
  initiatorNetwork: String
  initiatorAmount: BigInt
  initiatorToken: Bytes
  receiver: Bytes
  receiverNetwork: String
  receiverAmount: BigInt
  receiverToken: Bytes
  # transactionStatus: TransactionStatus
  timestamp: BigInt
  # validations: [TransactionValidation!] @derivedFrom(field: "transaction")
  # execution: TransactionExecution
  messageId: Bytes
  # nonce: Bytes | undefined # Nonce parameter for UserRequestForSignatureWithNonce events
}

type AMBTransaction @entity(immutable: false) {
  id: ID! # Message ID
  transactionHash: Bytes
  bridgeName: String
  initiator: Bytes
  initiatorNetwork: String
  initiatorAmount: BigInt
  initiatorToken: Bytes
  receiver: Bytes
  receiverNetwork: String
  receiverAmount: BigInt
  receiverToken: Bytes
  transactionStatus: TransactionStatus
  timestamp: BigInt
  # validations: [TransactionValidation!] @derivedFrom(field: "transaction")
  execution: TransactionExecution
  messageId: Bytes
}
